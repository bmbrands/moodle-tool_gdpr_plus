{"version":3,"sources":["../../src/local/cookie-helper.js"],"names":["DEFAULT_STATUS","DEFAULT_ACCEPTED_CATEGORIES","CookieHelper","cookieOptions","load","serialized","JSON","stringify","status","acceptedCategories","cookieStr","name","expDate","Date","expDays","expiryDays","expHours","setHours","getHours","toUTCString","domain","secure","sameSite","document","cookie","existingConsent","_getCookie","parsed","parse","cookieName","value","parts","split","length","pop","shift","Object","defineProperties","writable"],"mappings":"ydA4BMA,CAAAA,CAAc,CAAG,I,CACjBC,CAA2B,CAAG,E,CAIfC,C,YACjB,WAAYC,CAAZ,CAA2B,WACvB,KAAKA,aAAL,CAAqBA,CAArB,CACA,KAAKC,IAAL,EACH,C,sCAEM,IACGC,CAAAA,CAAU,CAAGC,IAAI,CAACC,SAAL,CAAe,CAC9BC,MAAM,CAAE,KAAKA,MADiB,CAE9BC,kBAAkB,CAAE,KAAKA,kBAFK,CAAf,CADhB,CAMCC,CAAS,CAAG,KAAKP,aAAL,CAAmBQ,IAAnB,CAA0B,GAA1B,CAAgCN,CAN7C,CAQGO,CAAO,CAAG,GAAIC,CAAAA,IARjB,CASGC,CAAO,CAAG,KAAKX,aAAL,CAAmBY,UAThC,CAUGC,CAAQ,CAAmD,EAAhD,EAAoB,QAAnB,QAAOF,CAAAA,CAAP,CAA8B,GAA9B,CAAoCA,CAArC,CAVd,CAWHF,CAAO,CAACK,QAAR,CAAiBL,CAAO,CAACM,QAAR,GAAqBF,CAAtC,EACAN,CAAS,EAAI,aAAeE,CAAO,CAACO,WAAR,EAA5B,CAEAT,CAAS,EAAI,UAAb,CACAA,CAAS,EAAK,KAAKP,aAAL,CAAmBiB,MAAnB,CAA4B,YAAc,KAAKjB,aAAL,CAAmBiB,MAA7D,CAAsE,EAApF,CACAV,CAAS,EAAK,KAAKP,aAAL,CAAmBkB,MAAnB,CAA4B,UAA5B,CAAyC,EAAvD,CACAX,CAAS,EAAK,KAAKP,aAAL,CAAmBmB,QAAnB,CAA8B,cAAgB,KAAKnB,aAAL,CAAmBmB,QAAjE,CAA4E,EAA1F,CAEAC,QAAQ,CAACC,MAAT,CAAkBd,CACrB,C,mCAEM,CACH,GAAMe,CAAAA,CAAe,CAAG,KAAKC,UAAL,CAAgB,KAAKvB,aAAL,CAAmBQ,IAAnC,CAAxB,CACA,GAAIc,CAAJ,CAAqB,CACjB,GAAME,CAAAA,CAAM,CAAGrB,IAAI,CAACsB,KAAL,CAAWH,CAAX,CAAf,CACA,KAAKjB,MAAL,CAAcmB,CAAM,CAACnB,MAArB,CACA,KAAKC,kBAAL,CAA0BkB,CAAM,CAAClB,kBACpC,CAJD,IAIO,CACH,KAAKD,MAAL,CAAcR,CAAd,CACA,KAAKS,kBAAL,CAA0BR,CAC7B,CACJ,C,8CAEU4B,C,CAAY,IACbC,CAAAA,CAAK,aAAQP,QAAQ,CAACC,MAAjB,CADQ,CAEbO,CAAK,CAAGD,CAAK,CAACE,KAAN,aAAiBH,CAAjB,MAFK,CAGnB,GAAqB,CAAjB,GAAAE,CAAK,CAACE,MAAV,CAAwB,CACpB,MAAOF,CAAAA,CAAK,CAACG,GAAN,GAAYF,KAAZ,CAAkB,GAAlB,EAAuBG,KAAvB,EACV,CACJ,C,4BAILC,MAAM,CAACC,gBAAP,CAAwBnC,CAAxB,CAAsC,CAClCF,cAAc,CAAE,CAAC8B,KAAK,CAAE9B,CAAR,CAAwBsC,QAAQ,GAAhC,CADkB,CAElCrC,2BAA2B,CAAE,CAAC6B,KAAK,CAAE7B,CAAR,CAAqCqC,QAAQ,GAA7C,CAFK,CAAtC,E","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Cookie consent policy\n *\n * Derived from https://github.com/klaxit/cookie-consent\n * version 0.3.4\n *\n * @module    local_gprd_plus/cookie\n * @class     Cookie\n * @package   local_gprd_plus\n * @copyright 2021 - CALL Learning - Laurent David <laurent@call-learning.fr>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst DEFAULT_STATUS = null;\nconst DEFAULT_ACCEPTED_CATEGORIES = [];\n/**\n * Cookie utility class\n */\nexport default class CookieHelper {\n    constructor(cookieOptions) {\n        this.cookieOptions = cookieOptions;\n        this.load();\n    }\n\n    save() {\n        const serialized = JSON.stringify({\n            status: this.status,\n            acceptedCategories: this.acceptedCategories\n        });\n\n        let cookieStr = this.cookieOptions.name + \"=\" + serialized;\n\n        const expDate = new Date();\n        const expDays = this.cookieOptions.expiryDays;\n        const expHours = (typeof expDays !== \"number\" ? 365 : expDays) * 24;\n        expDate.setHours(expDate.getHours() + expHours);\n        cookieStr += \"; expires=\" + expDate.toUTCString();\n\n        cookieStr += \"; path=/\";\n        cookieStr += (this.cookieOptions.domain ? \"; domain=\" + this.cookieOptions.domain : \"\");\n        cookieStr += (this.cookieOptions.secure ? \"; secure\" : \"\");\n        cookieStr += (this.cookieOptions.sameSite ? \"; SameSite=\" + this.cookieOptions.sameSite : \"\");\n\n        document.cookie = cookieStr;\n    }\n\n    load() {\n        const existingConsent = this._getCookie(this.cookieOptions.name);\n        if (existingConsent) {\n            const parsed = JSON.parse(existingConsent);\n            this.status = parsed.status;\n            this.acceptedCategories = parsed.acceptedCategories;\n        } else {\n            this.status = DEFAULT_STATUS;\n            this.acceptedCategories = DEFAULT_ACCEPTED_CATEGORIES;\n        }\n    }\n\n    _getCookie(cookieName) {\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${cookieName}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n}\n\n// Make default values public.\nObject.defineProperties(CookieHelper, {\n    DEFAULT_STATUS: {value: DEFAULT_STATUS, writable: false},\n    DEFAULT_ACCEPTED_CATEGORIES: {value: DEFAULT_ACCEPTED_CATEGORIES, writable: false}\n});\n"],"file":"cookie-helper.min.js"}