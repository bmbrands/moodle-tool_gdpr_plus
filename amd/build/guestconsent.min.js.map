{"version":3,"sources":["../src/guestconsent.js"],"names":["Guestconsent","options","_instance","_emitter","Object","assign","defaultOptions","_consentBox","ConsentBox","_cookie","CookieHelper","cookie","on","close","status","acceptedCategories","keys","categories","save","emit","emitConsentChanged","selectedCategories","open","event","Observable","defineProperties","value","Error","get","DEFAULT_STATUS","DEFAULT_ACCEPTED_CATEGORIES"],"mappings":"mPA4BA,OACA,OACA,OACA,O,igEAEqBA,CAAAA,C,+BACjB,YAA0B,OAAdC,CAAc,wDAAJ,EAAI,WAMtB,GAAID,CAAY,CAACE,SAAjB,CAA4B,CACxB,WAAOF,CAAY,CAACE,SAApB,CACH,CACD,cAAMF,CAAY,CAACG,QAAnB,EACAH,CAAY,CAACE,SAAb,MAGA,EAAKD,OAAL,CAAeG,MAAM,CAACC,MAAP,CAAcC,SAAd,CAA8BL,CAA9B,CAAf,CACA,EAAKM,WAAL,CAAmB,GAAIC,UAAJ,CAAe,EAAKP,OAApB,CAAnB,CACA,EAAKQ,OAAL,CAAe,GAAIC,UAAJ,CAAiB,EAAKT,OAAL,CAAaU,MAA9B,CAAf,CAEA,EAAKJ,WAAL,CAAiBK,EAAjB,CAAoB,YAApB,CAAkC,UAAM,CACpC,EAAKL,WAAL,CAAiBM,KAAjB,GACA,EAAKJ,OAAL,CAAaK,MAAb,CAAsB,UAAtB,CACA,EAAKL,OAAL,CAAaM,kBAAb,CAAkCX,MAAM,CAACY,IAAP,CAAY,EAAKf,OAAL,CAAagB,UAAzB,CAAlC,CACA,EAAKR,OAAL,CAAaS,IAAb,GACA,EAAKC,IAAL,CAAU,YAAV,EACA,EAAKC,kBAAL,EACH,CAPD,EASA,EAAKb,WAAL,CAAiBK,EAAjB,CAAoB,iBAApB,CAAuC,UAAM,CACzC,EAAKL,WAAL,CAAiBM,KAAjB,GACA,EAAKJ,OAAL,CAAaK,MAAb,CAAsB,UAAtB,CACA,EAAKL,OAAL,CAAaM,kBAAb,CAAkC,EAAKR,WAAL,CAAiBc,kBAAjB,EAAlC,CACA,EAAKZ,OAAL,CAAaS,IAAb,GACA,EAAKC,IAAL,CAAU,gBAAV,CAA4B,EAAKZ,WAAL,CAAiBc,kBAAjB,EAA5B,EACA,EAAKD,kBAAL,EACH,CAPD,EASA,EAAKb,WAAL,CAAiBK,EAAjB,CAAoB,QAApB,CAA8B,UAAM,CAChC,EAAKL,WAAL,CAAiBM,KAAjB,GACA,EAAKJ,OAAL,CAAaK,MAAb,CAAsB,UAAtB,CACA,EAAKL,OAAL,CAAaM,kBAAb,CAAkC,EAAlC,CACA,EAAKN,OAAL,CAAaS,IAAb,GACA,EAAKC,IAAL,CAAU,gBAAV,EACA,EAAKC,kBAAL,EACH,CAPD,EASA,GAAI,CAAC,EAAKX,OAAL,CAAaK,MAAlB,CAA0B,CACtB,EAAKP,WAAL,CAAiBe,IAAjB,EACH,CA9CqB,QA+CzB,C,sCAUM,CACH,KAAKf,WAAL,CAAiBe,IAAjB,EACH,C,kCAEIC,C,CAAO,CACR,wCAAWA,CAAX,CAAkB,IAAlB,CACH,C,+DAEoB,CACjB,KAAKJ,IAAL,CAAU,6BAAV,CAAyC,CACrC,QAAY,KAAKV,OAAL,CAAaK,MADY,CAErC,mBAAuB,KAAKL,OAAL,CAAaM,kBAFC,CAAzC,CAIH,C,kCArBY,CACT,MAAO,MAAKN,OAAL,CAAaK,MACvB,C,8CAEwB,CACrB,MAAO,MAAKL,OAAL,CAAaM,kBACvB,C,cAxDqCS,S,cA4E1CpB,MAAM,CAACqB,gBAAP,CAAwBzB,CAAxB,CAAsC,CAClCsB,IAAI,CAAE,CACFI,KADE,iBACM,CACJ,GAAI,CAAC,KAAKxB,SAAV,CAAqB,CACjB,KAAM,IAAIyB,CAAAA,KAAJ,CAAU,8DAAV,CACT,CAED,KAAKzB,SAAL,CAAeoB,IAAf,EACH,CAPC,CAD4B,CAUlCR,MAAM,CAAE,CACJc,GADI,eACE,CACF,MAAO,MAAK1B,SAAL,CAAiB,KAAKA,SAAL,CAAeY,MAAhC,CAAyCJ,UAAamB,cAChE,CAHG,CAV0B,CAelCd,kBAAkB,CAAE,CAChBa,GADgB,eACV,CACF,MAAO,MAAK1B,SAAL,CAAiB,KAAKA,SAAL,CAAea,kBAAhC,CAAqDL,UAAaoB,2BAC5E,CAHe,CAfc,CAAtC,E","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Cookie consent policy\n *\n * Derived from https://github.com/klaxit/cookie-consent\n * version 0.3.4\n *\n * @module    local_gprd_plus/cookie\n * @class     Cookie\n * @package   local_gprd_plus\n * @copyright 2021 - CALL Learning - Laurent David <laurent@call-learning.fr>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport defaultOptions from \"./local/default-options\";\nimport ConsentBox from \"./local/consent-box\";\nimport CookieHelper from \"./local/cookie-helper\";\nimport Observable from \"./local/observable\";\n\nexport default class Guestconsent extends Observable {\n    constructor(options = {}) {\n        // Since there must only be one instance (one consent box),\n        // we will indicate user that it is not OK to create many\n        // instances. Because of the option Object that may vary,\n        // we cannot just return original instance, users would be\n        // confused.\n        if (Guestconsent._instance) {\n            return Guestconsent._instance;\n        }\n        super(Guestconsent._emitter);\n        Guestconsent._instance = this;\n\n\n        this.options = Object.assign(defaultOptions, options);\n        this._consentBox = new ConsentBox(this.options);\n        this._cookie = new CookieHelper(this.options.cookie);\n\n        this._consentBox.on(\"accept-all\", () => {\n            this._consentBox.close();\n            this._cookie.status = \"accepted\";\n            this._cookie.acceptedCategories = Object.keys(this.options.categories);\n            this._cookie.save();\n            this.emit(\"accept-all\");\n            this.emitConsentChanged();\n        });\n\n        this._consentBox.on(\"accept-selected\", () => {\n            this._consentBox.close();\n            this._cookie.status = \"accepted\";\n            this._cookie.acceptedCategories = this._consentBox.selectedCategories();\n            this._cookie.save();\n            this.emit(\"accept-cookies\", this._consentBox.selectedCategories());\n            this.emitConsentChanged();\n        });\n\n        this._consentBox.on(\"reject\", () => {\n            this._consentBox.close();\n            this._cookie.status = \"rejected\";\n            this._cookie.acceptedCategories = [];\n            this._cookie.save();\n            this.emit(\"reject-cookies\");\n            this.emitConsentChanged();\n        });\n\n        if (!this._cookie.status) {\n            this._consentBox.open();\n        }\n    }\n\n    get status() {\n        return this._cookie.status;\n    }\n\n    get acceptedCategories() {\n        return this._cookie.acceptedCategories;\n    }\n\n    open() {\n        this._consentBox.open();\n    }\n\n    emit(event) {\n        super.emit(event, this);\n    }\n\n    emitConsentChanged() {\n        this.emit(\"user_cookie_consent_changed\", {\n            'consent' : this._cookie.status,\n            'acceptedCategories':  this._cookie.acceptedCategories\n        });\n    }\n}\n\n// Static level properties, since class level static properties are still a\n// proposal, we use Object.defineProperties.\nObject.defineProperties(Guestconsent, {\n    open: {\n        value() {\n            if (!this._instance) {\n                throw new Error(\"You must initialize a CookieConsent instance before opening.\");\n            }\n\n            this._instance.open();\n        }\n    },\n    status: {\n        get() {\n            return this._instance ? this._instance.status : CookieHelper.DEFAULT_STATUS;\n        }\n    },\n    acceptedCategories: {\n        get() {\n            return this._instance ? this._instance.acceptedCategories : CookieHelper.DEFAULT_ACCEPTED_CATEGORIES;\n        }\n    },\n});\n"],"file":"guestconsent.min.js"}