{"version":3,"file":"policies-consent-manager.min.js","sources":["../src/policies-consent-manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Policies consent\n *\n * Derived from https://github.com/klaxit/cookie-consent\n * version 0.3.4\n *\n * @module    tool_gdpr_plus/src/policies-consent-manager\n * @class     PoliciesConsentManager\n * @package   tool_gdpr_plus\n * @copyright 2021 - CALL Learning - Laurent David <laurent@call-learning.fr>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Repository from './repository';\nimport {exception as displayException} from 'core/notification';\n\n/**\n * Defaut settings for the constructor\n */\nconst DEFAULT_SETTINGS = {};\n\nconst POLICY_CHECKBOXES_SELECTOR = \".policies-settings-container input.policy-checkbox\";\n/**\n * Policy Consent Manager class\n */\nexport default class PoliciesConsentManager {\n    constructor(alloptions = {}) {\n        const {containerId, ...otheroptions} = alloptions;\n        this.options = Object.assign(DEFAULT_SETTINGS, otheroptions);\n        this.container = document.getElementById(containerId);\n\n        this.container.querySelectorAll('.tool_gdpr_plus_action').forEach((element) => {\n            const action = element.dataset.action;\n            const ACTION_DISPATCHER = {\n                \"accept-selected\": this.__acceptSelected,\n                \"reject-nonessential\": this.__rejectNonEssential,\n                \"accept-all\": this.__acceptAll\n            };\n            element.addEventListener(\"click\", ACTION_DISPATCHER[action].bind(this));\n        });\n        if (!this.options.policyAgreed) {\n            this.open();\n        }\n        const showpopup = this.container.querySelector(\".show-popup\");\n        showpopup.addEventListener(\"click\", this.open.bind(this));\n        this.triggerCurrentPolicyStatus();\n    }\n\n    open() {\n        this.container.querySelector('.policy-container').classList.add(\"displayed\");\n    }\n\n    close() {\n        this.container.querySelector('.policy-container').classList.remove(\"displayed\");\n    }\n\n    emit(event) {\n        super.emit(event, this);\n    }\n\n    triggerCurrentPolicyStatus() {\n        const policiesAcceptances = this.__getPoliciesAcceptance(false, false);\n        const eventname = \"grpd_policies_current_status\";\n        document.dispatchEvent(new CustomEvent(eventname, {\n            detail: policiesAcceptances\n        }));\n    }\n    __getPoliciesAcceptance(rejectNonMandatory, forceAcceptance) {\n        const policyAcceptance = [];\n        this.container.querySelectorAll(POLICY_CHECKBOXES_SELECTOR).forEach(\n            (policyElement) => {\n                const policyVersionKey = policyElement.dataset.id;\n                const mandatoryPolicy = (policyElement.dataset.mandatory === '1');\n                let accepted = mandatoryPolicy || policyElement.checked;\n                if (rejectNonMandatory && !mandatoryPolicy) {\n                    accepted = false;\n                }\n                accepted = accepted || forceAcceptance;\n                const acceptance = {\n                    'policyversionid': policyVersionKey,\n                    'accepted': accepted\n                };\n                policyAcceptance.push(acceptance);\n            }\n        );\n        return policyAcceptance;\n    }\n\n    __acceptSelected() {\n        const policiesAcceptances = this.__getPoliciesAcceptance(false, false);\n        this.__acceptPolicies(policiesAcceptances);\n    }\n\n    __rejectNonEssential() {\n        const policiesAcceptances = this.__getPoliciesAcceptance(true, false);\n        this.__acceptPolicies(policiesAcceptances);\n    }\n\n    __acceptAll() {\n        const policiesAcceptances = this.__getPoliciesAcceptance(false, true);\n        this.__acceptPolicies(policiesAcceptances);\n    }\n\n    __acceptPolicies(policiesAcceptances) {\n        const eventname = \"grpd_policies_accepted\";\n        this.__setRemotePolicyAcceptance(policiesAcceptances);\n        document.dispatchEvent(new CustomEvent(eventname, {\n            detail: policiesAcceptances\n        }));\n        this.__resetPolicyUI(policiesAcceptances);\n        this.close();\n    }\n\n    __setRemotePolicyAcceptance(policiesAcceptances) {\n        Repository.acceptPolicies(policiesAcceptances).catch(displayException);\n    }\n\n    __resetPolicyUI(policiesAcceptances) {\n        this.container.querySelectorAll(POLICY_CHECKBOXES_SELECTOR).forEach(\n            (policyElement) => {\n                const policyAcceptanceFound = policiesAcceptances && policiesAcceptances.find(\n                    (elem) => elem.policyid == policyElement.dataset.id\n                );\n                if (policyAcceptanceFound) {\n                    policyElement.value = policyElement.checked = policyAcceptanceFound.accepted;\n                }\n            }\n        );\n    }\n}\n"],"names":["DEFAULT_SETTINGS","PoliciesConsentManager","alloptions","containerId","otheroptions","options","Object","assign","container","document","getElementById","querySelectorAll","forEach","element","action","dataset","ACTION_DISPATCHER","_this","__acceptSelected","__rejectNonEssential","__acceptAll","addEventListener","bind","this","policyAgreed","open","showpopup","querySelector","triggerCurrentPolicyStatus","classList","add","remove","event","policiesAcceptances","__getPoliciesAcceptance","dispatchEvent","CustomEvent","detail","rejectNonMandatory","forceAcceptance","policyAcceptance","policyElement","policyVersionKey","id","mandatoryPolicy","mandatory","accepted","checked","acceptance","push","__acceptPolicies","__setRemotePolicyAcceptance","__resetPolicyUI","close","Repository","acceptPolicies","catch","displayException","policyAcceptanceFound","find","elem","policyid","value"],"mappings":"mlGAkCMA,iBAAmB,GAMJC,mFACLC,kEAAa,oDACdC,YAAgCD,WAAhCC,YAAgBC,sCAAgBF,2BAClCG,QAAUC,OAAOC,OAAOP,iBAAkBI,mBAC1CI,UAAYC,SAASC,eAAeP,kBAEpCK,UAAUG,iBAAiB,0BAA0BC,SAAQ,SAACC,aACzDC,OAASD,QAAQE,QAAQD,OACzBE,kBAAoB,mBACHC,MAAKC,uCACDD,MAAKE,kCACdF,MAAKG,aAEvBP,QAAQQ,iBAAiB,QAASL,kBAAkBF,QAAQQ,KAAKL,WAEhEM,KAAKlB,QAAQmB,mBACTC,WAEHC,UAAYH,KAAKf,UAAUmB,cAAc,eAC/CD,UAAUL,iBAAiB,QAASE,KAAKE,KAAKH,KAAKC,YAC9CK,6IAGT,gBACSpB,UAAUmB,cAAc,qBAAqBE,UAAUC,IAAI,kCAGpE,gBACStB,UAAUmB,cAAc,qBAAqBE,UAAUE,OAAO,iCAGvE,SAAKC,qFACUA,MAAOT,gDAGtB,eACUU,oBAAsBV,KAAKW,yBAAwB,GAAO,GAEhEzB,SAAS0B,cAAc,IAAIC,YADT,+BACgC,CAC9CC,OAAQJ,8DAGhB,SAAwBK,mBAAoBC,qBAClCC,iBAAmB,eACpBhC,UAAUG,iBAhDY,sDAgDiCC,SACxD,SAAC6B,mBACSC,iBAAmBD,cAAc1B,QAAQ4B,GACzCC,gBAAuD,MAApCH,cAAc1B,QAAQ8B,UAC3CC,SAAWF,iBAAmBH,cAAcM,QAC5CT,qBAAuBM,kBACvBE,UAAW,OAGTE,WAAa,iBACIN,0BAFvBI,SAAWA,UAAYP,iBAKvBC,iBAAiBS,KAAKD,eAGvBR,iDAGX,eACUP,oBAAsBV,KAAKW,yBAAwB,GAAO,QAC3DgB,iBAAiBjB,yDAG1B,eACUA,oBAAsBV,KAAKW,yBAAwB,GAAM,QAC1DgB,iBAAiBjB,gDAG1B,eACUA,oBAAsBV,KAAKW,yBAAwB,GAAO,QAC3DgB,iBAAiBjB,qDAG1B,SAAiBA,0BAERkB,4BAA4BlB,qBACjCxB,SAAS0B,cAAc,IAAIC,YAFT,yBAEgC,CAC9CC,OAAQJ,4BAEPmB,gBAAgBnB,0BAChBoB,mDAGT,SAA4BpB,qBACxBqB,WAAWC,eAAetB,qBAAqBuB,MAAMC,wDAGzD,SAAgBxB,0BACPzB,UAAUG,iBAjGY,sDAiGiCC,SACxD,SAAC6B,mBACSiB,sBAAwBzB,qBAAuBA,oBAAoB0B,MACrE,SAACC,aAASA,KAAKC,UAAYpB,cAAc1B,QAAQ4B,MAEjDe,wBACAjB,cAAcqB,MAAQrB,cAAcM,QAAUW,sBAAsBZ"}